/* 2. 표현식과 연산자 */

/*
  일반적으로 웹사이트는 여러개의 JavaScript로 이루어져있다.
  대부분 스크립트 언어의 특징이지만
  JS는 파일들을 각각의 별개의 프로그램으로 취급한다.

  * 자바스크립트 프로그램을 무엇으로 이루어져 있을까?

  - Expressions : 표현식
  - Statements : 문장

  표현식과 문장 두가지 문법적 카테고리로 이루어져 있다.

  **** Expressions ****

  표현식이란 어떠한 결과 값으로 평가되는 식이다. 즉 결과가 계산되는 '식'을 의미
  숫자, 문자열, 논리값 같은 원시 값을 포함하여  변수, 상수, 함수 호출 등으로 조합할 수 있다.

  ** 할당 연산자 **

  이런 표현식은 연산자를 조합하여 새로운 표현식을 만들어 낼 수 있다.
  할당 연산자는 오른쪽 표현식을 왼쪽 피연산자 값에 할당하는 연산자
  등호(=)를 사용하며 다른 연산자와 같이 사용하여 '복합 할당 연산자'로 이용할 수 있다.

  ** 비교 연산자 **

  좌측 피연산자와 우측 피연산자를 비교하는 연산자
  true 혹은 false를 반환한다.

  ** 산술 연산자 ** 

  덧셈, 뺄셈, 곱셈, 나눗셈을 하는 연산자
  Number를 반환한다.

  ** 비트 연산자 **

  비트를 직접 조작하는 연산자
  이진법으로 나타냈을 때 각 비트를 조작한다.
  코테에서 가끔 사용되는 경우가 있다

  ** 논리 연산자 **

  Boolean을 통해 참과 거짓을 검증하는 연산자
  조건문이나 반복문에서 자주 사용된다.

  ** 삼항 연산자 **

  조건에 따라 값을 선택하는 연산자
  편의를 위해 조건문 대신 쓰일 때가 많다.
  `조건 ? 참 : 거짓` 형태를 가진다

  ** 관계 연산자 **
  
  객체에 속성이 있는지 확인하기 위한 연산자 

  ** typeof **

  피연산자의 타입을 반환하는 연산자
  문자열로 반환된다.
*/

// 표현식

const a = 10 + 32; // 42
const b = a - 20; // 22
const c = "String" + 3; // "String3"
const d = true + false + true; // 2

// 할당 연산자

let x;
// 할당 연산자
x = 10;

// 복합 할당 연산자
x += 5; // 덧셈 할당 => 15 
x -= 5; // 뺄셈 할당 => 10
x *= 10; // 곱셈 할당 => 100
x /= 10; // 나눗셈 할당 => 10
x %= 3; // 나머지 연산 할당 => 1
x <<= 4; // 비트 왼쪽 이동 할당 => 16
x >>= 2; // 비트 오른쪽 이동 할당 => 4


// 비교 연산자

const o = 10;
const p = 12;

o == p; // 동등 => false
o != p; // 부등 => true
o === p; // 일치 => false
o !== p; // 불일치 => true
o > p; // ~보다 큰 => false
o >= p; // ~보다 크거나 같은 => false
o < p; // ~보다 작은 => true
o <= p; // ~보다 작거나 같은 => true

"10" == 10 // true
"10" === 10 // false

// 산술연산자

const q = 10;
const w = 12;

q + w; // 덧셈 => 22
q - w; // 뺄셈 => -2
q * w; // 곱셈 => 120
q / w; // 나눗셈 => 0.8333...

console.log(q / w);

// 비트 연산자

const e = 10; // 1010
const r = 12; // 1100

e & r; // AND => 8
e | r; // OR => 14
e ^ r; // XOR => 6
// 00000000000000000000000000001010
// 11111111111111111111111111110101
// 2의 보수
~e; // NOT => -11
e << 1; // Left Shift => 10100 => 20
e >> 1; // Right Shift => 101 => 5

// 논리 연산자

const t = true;
const u = false;

t && u; // AND => false
t || u; // OR => true
!t; // NOT => false

// 삼항 연산자

const i = 10;
const f = 12;

// i가 f보다 작아 거짓이기 때문에 뒤의 값을 선택
i > f ? 100 : 200; // 200

// 관계 연산자

const h = {
  name: "Pham yoon tae",
  email: "bibi@bibiboy.co.kr",
};

"name" in h; // true
"gender" in h; // false

// typeof

const j = 10;
const k = "String";
const l = false;

typeof j; // number
typeof k; // string
typeof l; // boolean