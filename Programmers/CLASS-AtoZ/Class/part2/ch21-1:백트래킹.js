/* Ch21-1. 백트래킹 */

/*
  * 백트래킹 (Backtracking) *

  - 모든 경우의 수를 탐색하는 알고리즘
  - DFS, BFS를 이용할 수 있다
  - 효율을 위해 탐색하지 않아도 되는 곳을 미리 막는 것을 '가지치기(pruning)'라고 한다.
  - 자바스크립트는 재귀 효율이 나쁘기 때문에 DFS를 구현할 경우 스택을 이용하는 것이 좋다.
    ㄴ 코딩 테스트에선 이를 고려하여 재귀로 작성해도 풀 수 있도록 문제를 제출하는 경우도 있다.
  - 탐색에서 순환(Cycle)이 발생할 수 있다면 BFS를 이용하는 것이 편하다.
  
  * BFS, DFS * 
  모든 경우의 수를 찾을 때도 사용한다.

  ** 백트래킹의 핵심은 가지치기이다.
  가지치기를 얼마나 잘하느냐가 효율성을 결정한다.

  * 어떻게 작성할 것인가?

  - 우선 모든 경우의 수를 찾을 수 있도록 코딩
  - 이후 문제에서 '특정한 조건'을 만족하는 것만 탐색하고 나머지는 탐색하지 않도록 조건문을 작성한다.
  - 즉, 절대로 답이 될 수 없는 것은 탐색을 종료한다.

  * N-Queen 문제 *

  보통 백트래킹을 설명할 때 N-Queen 문제가 자주 나온다.
  * 길이가 N인 체스판 위에 N개의 퀸이 서로를 공격할 수 없도록 배치할 수 있는 경우의 수는? *

  백트래킹은 모든 경우의 수를 찾아야 하기에 일단 무언가를 하고본다.
  
  1. 1,1에 퀸을 배치. 첫 줄은 더이상 퀸을 둘 수 없기에 다음 줄로 이동 (가지치기)
  2. 두번째 줄 첫칸은 둘 수 없기에 패스 (가지치기)
  3. 마찬가지로 대각선줄도 둘수 없기 때문에 (가지치기)
  4. 이어서 조건을 만족한 부분에는 가지치기를 하지 않고, 퀸 배치를 한다 (2, 3) 탐색을 이어나간다는 뜻
  5. 이후 로직에서 세번재 줄은 퀸을 둘 수 없어서 이후 탐색은 제외한다.

  6. 더이상 진행이 불가능하기 때문에 처음으로 돌아와서 1,2에 둬본다
  7. 안되는 곳은 패스하고 되는곳에 둔다 (2,4)
  8. 마찬가지로 세번 째줄에서도 안되는 곳은 패스 (3,1)
  9. 결과적으로 N개의 퀸을 배치할 수 있는 경우의 수를 찾을 수 있다.

  만약 가지치기를 하지 않았다면 조금 더 오래걸리게 된다.
*/
