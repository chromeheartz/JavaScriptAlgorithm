/* Ch01-2. 코딩테스트 준비 방법 */

/*
  * 문제 풀때 중요한 것 *

  1. 항상 '여러가지 풀이 방법'이 있을 수 있다는 것을 기억
  2. 항상 '예외가 있을 수 있다는 것'을 기억
  3. 내가 풀어낸 답이 '베스트인지 의심' 하자
  4. 문제를 풀었다면 '시행착오를 모두 기록' 하자
  5. '다른 사람의 코드'를 많이 보자. 생각하지 못한 방법을 찾을 수 있다
  6. 쉽게 포기하지 말자. 하지만 '도저히 모르겠다면 답을 보는것'도 좋은 방법이다

  * 그나마 재밌게 공부하는 법 * 

  1. 시각적인 사이트의 도움을 받자
  알고리즘은 비쥬얼라이징 해주는 사이트를 한번씩 보는것

  2. 공부하는 자료구조/알고리즘이 어디에 쓰일지 생각해보면서 공부하자

  * 마음가짐 *

  1. 알고리즘 마스터가 될 필요는 없다.
   - 중요한 문제를 출제하기에 '문제 해결 능력'을 기르는 것이 좋다.
  2. 즉, '어디까지 공부할지' 정하는 것이 매우 중요하다.

  * 코딩 테스트를 잘 보는 법 *

  1. 자신의 성향을 파악하자
   - 내가 어떤사람인지 알아야한다
    - 미리 생각하고 의사코드를 작성하는 사람 / 일단 코드를 작성하면서 생각해야 잘 풀리는 사람

  2. 메모하기
   - 긴장하면 풀다가 내가 무엇을 하려 했는지 잊을 수 있다.
     코드에 주석을 달거나 노트에 메모하면서 풀자
   - 알고리즘은 논리적으로 표현할 수 있다. 헷갈리면 순서도를 그리면서 정리해보자
  
  3. 디버깅은 필수
   - 내가 예상한대로 동작이 안된다면 꼭 디버깅을 하자
   - 로직 중간에 출력값을 찍어보고 확인해보는것들.
   - 외부 IDE 사용이 가능하다면 NodeJS의 디버그 모드 사용해보자

  4. 익숙해지기
   - 문제를 잘 읽는 것에 익숙해져야 한다. (쓸데 없는 정보를 너무 많이 담고있는데 중요한것만 요약하여 읽게)
   - 시간복잡도를 계산하는 것에 익숙해져야 한다. (자잘한 성능보다 시간복잡도가 더 중요하다)
   - 항상 엣지 케이스를 생각하는 것에 익숙
  
   * 좋은 코드를 만드는 법칙 *

  1. 간결하고 가독성 좋은 코드
   - 변수, 함수의 이름을 잘 정했는가?
   - 중복 코드를 제거했는가?
   - 함수형 프로그래밍도 좋은 방법 (map, filter, reduce 같은 고차형 함수 사용)
  
  2. 가지치기
   - 백트래킹과 같은 알고리즘에서도 사용되지만 그외에도 중요하다
   - 사소한 로직이라면 성능이 크게 개선되지는 않지만 
     일부 불필요한 로직을 사용안하도록 막기 때문에 코드리뷰에서 좋은 평가를 받을 수 있다

  3. 자바스크립트를 잘 이용했는가?
  - 구조 분해 할당, spread 오퍼레이터 등 코드 깔끔하게 정리

  4. 일관성을 유지했는가?
  - 일관성 없는 코드보다 조금 더러워도 일관성있는 코드가 좋다
   - var / let 혼용 , snake_case / camelCase 혼용, 변수,함수명을 줄임말로 쓰다가 어딘가에서 전부 적는것
  - 제출 전에 코드 스타일이나 변수명, 함수명 꼭 확인하자

  ****** 코드를 안보는 코딩 테스트라면 스타일은 무시하고 풀자 시간을 투자하는게 아까울 수 있다 *******
*/