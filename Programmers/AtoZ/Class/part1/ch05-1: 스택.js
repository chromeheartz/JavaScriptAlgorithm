/* Ch05-1. 스택 */

/*
  * 스택 *
  Last In First Out (LIFO) 개념을 가진 선형 자료구조.
  나중에 들어간 요소가 먼저나오는 후입선출 구조를 가지고있다.
  바닥이 막힌 상자를 생각하면 편하다.

  넣을때는 PUSH, 뺄 때는 POP 이라고 한다.
  맨위에있는 요소를 TOP이라고 부름.

  * 스택의 동작 원리 *
  가장 맨위에있는 요소만 컨트롤 할 수 있다.

  * 스택 자료 구조 *
  스택 자료 구조를 이용하는것중 가장 대표적인 것은 '스택 메모리'이다.
  스택 메모리 함수가 호출되면 생성되는 매개변수, 지역변수가 저장되는 메모리 영역이다

  - 동작방식
   1. 가장 안쪽에 위치한 sum 함수가 실행되며 
   스택 메모리에는 매개변수, 반환 주소값, 지역 변수가 PUSH되어 기록이 된다.

   2. sum함수가 실행되어 값이 반환되면 스택 메모리에서 
   POP이 수행되어 삭제된다

   3. 이어서 print함수가 실행되어 아까 반환된 값으로 실행되어 기록이된다
   내부에는 console.log함수가 있는데 이것또한 다시 쌓이게된다
   무사히 로그 출력이 된다면 POP되서 삭제가된다

   4. print도 함수호출이 완료가되면 스택 메모리에서 제거가 된다.

   * 함수호출은 이런식으로 스택 자료 구조를 통해 메모리에 기록하고 제거된다 *


  * 코드로 표현하는 2가지 *

  - Array로 표현하기. Stack을 Array로 표현할 수 있다

  스택은 배열로 표현이 가능한데. Push를 하면 배열에 첫번째부터 순차적으로 요소가 삽입
  그리고 POP을 하면 가장 마지막부터 삭제
  이런 방식은 배열의 단점인 '중간요소 추가','삭제' 로직이 전혀 사용되지 않기 때문에 굉장히 유리할 수 있다
  특히 자바스크립트에선 배열의 크기가 유연하게 증감되기 떄문에 더 편하게 구현이 가능하다

  - Linked List로 표현하기. Stack을 Linked List로 표현할 수 있다

  C, JAVA같은데선 Stack의 크기가 고정되지 않는 경우에 유한한 배열대신
  연결리스트로 구현한 경우가 많았다.
  이 경우에는 연결리스트의 Head가 Stack의 Top이 된다

  **** JavaScript에서의 사용법 ****
  **** Logic/part1/stack.js ****

  - Array로 구현
  자바스크립트 배열엔 이미 push, pop이 존재하기 때문에 크게 할 일이 없다

  - Linked List로 구현
  기존 연결리스트 코드에서 head를 top으로 지정하고
  제거 로직은 '오직 head'를 제거하는 방법으로 로직을 수정하면 된다.
*/

// 스택 자료구조
function sum(a, b) {
  return a + b;
}

function print(value) {
  console.log(value)
}

print(sum(5, 10));

