/* Ch08. 그래프 */

/*
  * 그래프 *
  비선형 자료구조.
  정점과 정점 사이를 연결하는 간선으로 이루어진 비선형 자료구조
  정점 집합과 간선 집합으로 표현할 수 있다.

  정점과 간선은 Node, Edge라고도 부른다
  보통 '인물 관계도'에서 자주 사용된다.

  실제 소프트웨어에 사용되는 예로는
  페이지랭크, 지하철노선도 등이 있다.

  - 페이지랭크 
  구글이 존재할 수 있게한 검색 알고리즘.
  하나의 페이지가 정점이되고 페이지에서 파생되는 링크들이 간선이 되는것
  페이지와 링크를 수집하여 우선도를 측정하고 검색결과를 계산한다.

  * 그래프의 특징 *
  - 정점은 여러 개의 간선을 가질 수 있다.
  - 크게 간선의 방향이 존재하는 '방향 그래프', 존재하지 않는 '무방향 그래프'로 나눌 수 있다.
  - 간선은 가중치를 가질 수 있다.
  - 탐색시 계속 loop가 가능한 구역에 사이클이 생길 수 있다.
  탐색시 무한loop에 빠지지 않도록 사이클을 찾아야할 필요가 있다

  * 무방향 그래프 *
  간선으로 이어진 정점끼리는 양방향으로 이동이 가능하다.
  표현하기에 (A, B)와 (B, A)는 같은 간선으로 취급된다.
  ex) 양방향 통행 도로

  * 방향 그래프 *
  간선에 방향성이 존재하는 그래프.
  양방향으로 갈 수 있더라도 <A,B>,<B,A>는 다른 간선으로 취급된다.
  간선 두개중 하나가 존재하지 않는다면 양방향으로 이동 불가
  ex) 일방통행

  * 연결 그래프 *
  모든 정점이 서로 이동 가능한 상태인 그래프
  특정 정점에서 다른 특정 정점까지 모든 경우의 수가
  이동이 가능해야한다.

  * 비연결 그래프 *
  특정 정점쌍 사이에 간선이 존재하지 않는 그래프

  * 완전 그래프 *
  모든 정점끼리 연결된 상태인 그래프
  한 정점의 간선 수는 모든 정점의 수 - 1이 됨
  모든 정점의 수에 -1에서 모든 정점수를 곱하면 '모든 간선수'를 알 수 있다

  * 사이클 *
  그래프의 정점과 간선의 부분 집합에서 순환이 되는 부분

  ** 그래프의 구현 방법 **
  - 인접 행렬
  - 인접 리스트
  이 두가지 방식으로 그래프를 표현할 수 있다.


  *** JavaScript에서의 사용법 ***
  - 인접행렬
  정점의 크기만큼 2차원 배열을 만들고
  연결이 안된상태로 초기화한다.
  행렬의 열부분을 시작정점, 행부분을 도착정점을 넣어주고
  true값을 넣어주면 간선이 연결된것으로 친다

  만약 가중치를 넣고싶다면 true, false가 아닌
  null과 임의의 가중치값을 넣으면 된다.
  무방향 그래프를 구현한다면 모든 값을 대칭으로 넣어주면 된다

  - 인접리스트
  특히 자바스크립트에서 배열은 연결리스트처럼
  무한정 늘어날 수 있기 때문에
  정점의 수만큼 배열을 만들고
  연결할 정점을 배열에 추가하면 된다.
  
*/

// *** javascript ***

// 인접행렬
const graphMatrix = Array.from(
  Array(5),
  () => Array(5).fill(false)
)
graphMatrix[0][1] = true; // 0 -> 1
graphMatrix[0][3] = true; // 0 -> 3
graphMatrix[1][2] = true; // 1 -> 2
graphMatrix[2][0] = true; // 2 -> 0
graphMatrix[2][4] = true; // 2 -> 4
graphMatrix[3][2] = true; // 3 -> 2
graphMatrix[4][0] = true; // 4 -> 0

// 인접 리스트
const graphList = Array.from(
  Array(5),
  () => []
)
graphList[0].push(1) // 0 -> 1
graphList[0].push(3) // 0 -> 3
graphList[1].push(2) // 1 -> 2
graphList[2].push(0) // 2 -> 0
graphList[2].push(4) // 2 -> 4
graphList[3].push(2) // 3 -> 2
graphList[4].push(0) // 4 -> 0