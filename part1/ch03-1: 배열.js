/* Ch03-1. 배열 */

/*
  배열 (순차 리스트)

  연관된 데이터를 연속적인 형태로 구성된 구조를 가진다
  배열에 포함된 원소는 순서대로 번호(index)가 붙는다

  * 배열의 특징 *

  - 고정된 크기를 가지며 일반적으론 동적으로 크기를 늘릴 수 없다.
   자바스크립트처럼 파이썬, 루비등 대부분의 스크립트 언어는 동적으로 크기가 증감되도록 만들어져있다
  - 원하는 원소의 index를 알고 있다면 O(1)로 원소를 찾을 수 있다.
  - 원소를 삭제하면 해당 index에 빈자리가 생긴다

  * 배열 요소 삭제 *
  배열의 요소를 삭제하면 단순히 공백으로 둘 수 있지만
  후에 탐색, 정렬을 하기 위해서 앞당겨야 하는 경우가 있다.
  예시로 arr[0] - arr[8]이 있는데
  5번을 삭제하면 6번을 5번으로, 7번을 6번으로, 8번을 7번으로 앞당겨서
  순서를 맞춘다

  삭제 후 순서를 맞추려면 선형시간 ( O(n) )이 소요된다

  * 배열 요소 추가 *
  만약 예로 4번에 추가로 중간에 추가하려고한다.
  기존 4번을 5번으로, 5번을 6번으로, ... 끝까지 다 하게된다
  그래서 최악의경우 중간에 요소를 추가하고 싶다면 O(n)이 소요된다

  *** 따라서 추가와 삭제가 반복되는 로직이라면 배열 사용을 권장하지않는다
  배열은 탐색이 많은 경우에 유리하다

  **** JavaScript에서의 사용법 ****
  
  * 배열 생성
  - 빈 배열을 생성하는 방법
  - 미리 초기화된 배열을 생성하는 방법
  - 같은값으로 초기화된 배열을 생성하는 방법
  - 로직을 사용하여 생성하는 방법

  * 배열 요소 추가, 삭제
  - Push를 이용해 추가
  - Splice를 이용해 중간 값 추가
  - Splice를 이용해 중간 값 제거

  Splice는 선형시간을 가진다는 것을 기억

  * 특이점

  JavaScript배열은 여러 스크립트 언어처럼 동적으로 작동한다.
  즉 배열의 크기가 고정되지않고 필요에따라 증감을 한다
  index가 숫자가아닌 문자열이나 논리값도 들어갈 수 있다
  참고로, 숫자외에 값을 넣는다면 자동으로 문자열로 변환된값이 key 값이 된다
  이는 JavaScript의 배열이 근본적으로 '객체'타입이기때문

  그렇지만, 배열이 일반적인 객체와 다른점은 length가 내부적으로 관리가 된다
  반면, index와 무관한값을 index로 사용한 경우 length에 영향을 미치지 않는다
*/


/* ********
  JavaScript에서의 사용법
******** */

// - 배열 생성

// 빈 Array생성
let addArr1 = [];
console.log(addArr1); // []

// 미리 초기화된 Array 생성
let addArr2 = [1, 2, 3, 4, 5];
console.log(addArr2); // [1, 2, 3, 4, 5]

// 많은 값을 같은 값으로 초기화 할 경우 fill을 사용할 수 있다
let addArr3 = Array(10).fill(0);
console.log(addArr3); // [0, x 10]

// 특정 로직을 사용하여 초기화할 경우 from을 사용할 수 있다
let addArr4 = Array.from({ length: 20 }, (_,i) => i);
console.log(addArr4); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

// - 배열 요소 추가, 삭제

const modArr = [1, 2, 3];
console.log(modArr); // [1, 2, 3]

// 끝에 4 추가
modArr.push(4); // [1, 2, 3, 4];

// 여러개 한번에 추가
modArr.push(5, 6); // [1, 2, 3, 4, 5, 6]

// 3번 인덱스에 128 추가
modArr.splice(3, 0, 128); // O(n)
console.log(modArr); // [1, 2, 3, 128, 4, 5, 6]

// 3번 인덱스 값 제거
modArr.splice(3, 1); // O(n)
console.log(arr[3]); // 4

// - 특이점
const arr = [];
console.log(arr); // []
arr.push(1);
arr.push(1);
arr.push(2);
arr.push(3);
console.log(arr); // [1, 1, 2, 3]

// JavaScript의 Array는 HashMap에 가깝다
console.log(arr.length); // 4

// index가 number가 아니여도 괜찮다
arr['bibi'] = 10;
arr[true] = 0;
console.log(arr); // [1, 1, 2, 3, bibi: 10, true: 0]
console.log(arr.length); // 4

arr[4] = 5;
console.log(arr.length); // 5